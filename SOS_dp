//Maximum Bitwise Pair
//Solution of : Maximum bitwise pairs
//SOS DP <--- sum of subsets
#include<bits/stdc++.h>
using namespace std;
#define int long long 
#define FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);

const int inf = 1e18;

int32_t main(){
    FAST
    int t;cin>>t;
    while(t--){
        int n;cin>>n;
        int x=log2(n);
        vector<int> v(n+1);
        for(int i=1;i<=n;i++) cin>>v[i];

        // dp[i][j] <--- maximum value we can get from a submask of mask j differing with j only at first i bits
        vector<vector<int>> dp(19,vector<int> ((1<<(x+2)),-inf));

        //Filling up base states dp[0][mask];
        for(int i=1;i<=n;i++) {
            //differing at 0-th position would be dependent on fact that no id odd or even if its odd it has i-1 as it sub-mask
            if(i&1) dp[0][i] = max(dp[0][i^(1<<0)],v[i]);
            else dp[0][i] = v[i];
        }
        


        for(int i=1;i<=18;i++){
            for(int j=1;j<(1<<(x+2));j++){
                //if the i-th bit of j is set then we must take into consideration both cases of submask having i-th bit and not having i-th bit
                if(j&(1<<i)){
                    dp[i][j]=max(dp[i-1][j],dp[i-1][j^(1<<i)]);
                }
                //else it'd simply be the value of dp[i-1][j] because i-th bit won't affect the submask
                else {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }

        // for(int bit=0;bit<18;bit++){
        //     for(int i=1;i<=n;i++){
        //         cout<<dp[bit][i]<<" ";
        //     }
        //     cout<<"\n";
        // }



        int q;cin>>q;
        while(q--){
            int i;cin>>i;
            //To make i&j -> 0 we must take j as a submask of i^(111111111111)
            if(dp[18][i^((1<<(x+2))-1)]==-inf) cout<<-1<<"\n";
            else cout<<(v[i]+dp[18][i^((1<<(x+1))-1)])<<"\n";
        }
    }

    return 0;
}
